-- Create words table scoped to authenticated user
create table if not exists public.words (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  word text not null,
  definition text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Ensure per-user uniqueness of word, case-insensitive
create unique index if not exists words_user_word_unique_idx
  on public.words (user_id, lower(word));

-- RLS: enable and restrict access to owner
alter table public.words enable row level security;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'words'
      and policyname = 'Allow owners to select'
  ) then
    create policy "Allow owners to select" on public.words
      for select
      to authenticated
      using (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'words'
      and policyname = 'Allow owners to insert'
  ) then
    create policy "Allow owners to insert" on public.words
      for insert
      to authenticated
      with check (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'words'
      and policyname = 'Allow owners to update'
  ) then
    create policy "Allow owners to update" on public.words
      for update
      to authenticated
      using (auth.uid() = user_id)
      with check (auth.uid() = user_id);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'words'
      and policyname = 'Allow owners to delete'
  ) then
    create policy "Allow owners to delete" on public.words
      for delete
      to authenticated
      using (auth.uid() = user_id);
  end if;
end $$;

-- Updated-at trigger
create or replace function public.set_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

drop trigger if exists set_words_updated_at on public.words;
create trigger set_words_updated_at
before update on public.words
for each row execute function public.set_updated_at();

