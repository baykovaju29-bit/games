// src/App.jsx
import React from "react";
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";
import "./styles/index.css";
import { usePairsData } from "./dataHook";

// –≠–∫—Ä–∞–Ω—ã/–∏–≥—Ä—ã
import Matching from "./games/Matching.jsx";
import Flashcards from "./games/Flashcards.jsx";
import Quiz from "./games/Quiz.jsx";
import TypeTheWord from "./games/TypeTheWord.jsx";
import SentenceBuilder from "./games/SentenceBuilder.jsx";
import FillTheGap from "./games/FillTheGap.jsx";

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è —Å–ª–æ–≤
import LearnWords from "./pages/LearnWords.jsx";

// –í–ù–ï–®–ù–ò–ô –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ–º–æ–Ω—Ç–∞–∂–∞)
import GameScreen from "./ui/GameScreen.jsx";

/* ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---------- */
function Menu() {
  const VOCAB = [
    { to: "/matching",   icon: "üß©", title: "Matching",       desc: "Match words to definitions" },
    { to: "/flashcards", icon: "üÉè", title: "Flashcards",     desc: "Flip to reveal" },
    { to: "/quiz",       icon: "‚ùì", title: "Quiz",           desc: "Multiple choice" },
    { to: "/type",       icon: "‚å®Ô∏è", title: "Type the Word",  desc: "Type from definition" }
  ];
  const GRAMMAR = [
    { to: "/builder", icon: "üß±", title: "Sentence Builder", desc: "Arrange words to form a sentence" },
    { to: "/fill",    icon: "‚úçÔ∏è", title: "Fill the Gap",     desc: "Type the missing word" }
  ];

  return (
    <div className="container max-w-5xl py-6">
      {/* –ö–Ω–æ–ø–∫–∞ Learn words —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É */}
      <div className="flex justify-end mb-6">
        <Link to="/learn" className="btn">üìö Learn words</Link>
      </div>

      {/* Vocabulary */}
      <h1 className="h1">üéÆ Vocabulary Games</h1>
      <p className="sub mt-1">Choose a game to practice the same word list.</p>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 mt-6">
        {VOCAB.map(g => (
          <Link key={g.to} to={g.to} className="card card-pad text-left hover:bg-slate-50 active:scale-[0.99] transition">
            <div className="text-lg font-semibold">{g.icon} {g.title}</div>
            <div className="sub">{g.desc}</div>
          </Link>
        ))}
      </div>

      {/* Grammar */}
      <h2 className="h1 mt-12">üìò Grammar Games</h2>
      <p className="sub mt-1">Practice sentence structure and grammar rules.</p>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 mt-6">
        {GRAMMAR.map(g => (
          <Link key={g.to} to={g.to} className="card card-pad text-left hover:bg-slate-50 active:scale-[0.99] transition">
            <div className="text-lg font-semibold">{g.icon} {g.title}</div>
            <div className="sub">{g.desc}</div>
          </Link>
        ))}
      </div>
    </div>
  );
}

/* ---------- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ ---------- */
export default function App() {
  const { pairs, source, error, updatedAt } = usePairsData();

  const meta = (
    <div className="text-xs text-slate-500">
      Source: <span className="font-mono">{source || "/data.txt"}</span>
      {updatedAt && <> ¬∑ Updated: {updatedAt.toLocaleTimeString()}</>}
      {error && <> ¬∑ <span className="text-rose-600">Error: {error}</span></>}
    </div>
  );

  return (
    <Router>
      <Routes>
        {/* –ì–ª–∞–≤–Ω–∞—è: –º–µ–Ω—é */}
        <Route path="/" element={<Menu />} />

        {/* –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è —Å–ª–æ–≤ */}
        <Route
          path="/learn"
          element={
            <div className="min-h-screen py-6">
              <div className="container mb-4">
                <Link to="/" className="btn">‚Üê Back to menu</Link>
              </div>
              <LearnWords pairs={pairs} onStart={(gameId) => { /* –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ */ }} />
              <div className="fixed bottom-3 right-3 bg-white/80 backdrop-blur border rounded-lg px-3 py-2 shadow-sm">
                {meta}
              </div>
            </div>
          }
        />

        {/* ===== –ü–æ–ª–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–≥—Ä (–∫–∞–∂–¥–∞—è –∏–≥—Ä–∞ –æ–±—ë—Ä–Ω—É—Ç–∞ –≤–æ –≤–Ω–µ—à–Ω–∏–π GameScreen) ===== */}

        <Route
          path="/matching"
          element={
            <GameScreen meta={meta}>
              <Matching pairs={pairs} meta={meta} />
            </GameScreen>
          }
        />

        <Route
          path="/flashcards"
          element={
            <GameScreen meta={meta}>
              <Flashcards pairs={pairs} meta={meta} />
            </GameScreen>
          }
        />

        <Route
          path="/quiz"
          element={
            <GameScreen meta={meta}>
              <Quiz pairs={pairs} meta={meta} />
            </GameScreen>
          }
        />

        <Route
          path="/type"
          element={
            <GameScreen meta={meta}>
              <TypeTheWord pairs={pairs} meta={meta} />
            </GameScreen>
          }
        />

        <Route
          path="/builder"
          element={
            <GameScreen meta={meta}>
              <SentenceBuilder meta={meta} />
            </GameScreen>
          }
        />

        <Route
          path="/fill"
          element={
            <GameScreen meta={meta}>
              <FillTheGap meta={meta} />
            </GameScreen>
          }
        />
      </Routes>

      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É—Ç–µ—Ä (–Ω–∞ –≥–ª–∞–≤–Ω–æ–π —É–∂–µ –Ω—É–∂–µ–Ω) */}
      <div className="fixed bottom-3 right-3 bg-white/80 backdrop-blur border rounded-lg px-3 py-2 shadow-sm">
        {meta}
      </div>
    </Router>
  );
}
